using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;

class Program
{
    private static TelegramBotClient botClient;
    private static Dictionary<long, UserData> users = new Dictionary<long, UserData>();
    
    static async Task Main(string[] args)
    {
        botClient = new TelegramBotClient("YOUR_BOT_TOKEN");
        
        var me = await botClient.GetMeAsync();
        Console.WriteLine($"–ë–æ—Ç {me.Username} –∑–∞–ø—É—â–µ–Ω!");
        
        botClient.OnMessage += Bot_OnMessage;
        botClient.OnCallbackQuery += Bot_OnCallbackQuery;
        
        botClient.StartReceiving();
        
        Console.ReadLine();
        botClient.StopReceiving();
    }

    private static async void Bot_OnMessage(object sender, Telegram.Bot.Args.MessageEventArgs e)
    {
        var message = e.Message;
        if (message == null || message.Type != MessageType.Text)
            return;

        long chatId = message.Chat.Id;
        
        if (!users.ContainsKey(chatId))
        {
            users[chatId] = new UserData();
        }

        switch (message.Text)
        {
            case "/start":
                await SendWelcomeMessage(chatId);
                break;
            case "–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É":
                users[chatId].CurrentQuestion = 0;
                users[chatId].Score = 0;
                await SendQuestion(chatId, 0);
                break;
            case "–ú–æ–π —Å—á–µ—Ç":
                await botClient.SendTextMessageAsync(chatId, $"–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç: {users[chatId].Score} –±–∞–ª–ª–æ–≤");
                break;
            case "–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å":
                users[chatId].CurrentQuestion = 0;
                users[chatId].Score = 0;
                await botClient.SendTextMessageAsync(chatId, "–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∑–∞–Ω–æ–≤–æ!");
                break;
            default:
                await botClient.SendTextMessageAsync(chatId, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.");
                break;
        }
    }

    private static async void Bot_OnCallbackQuery(object sender, Telegram.Bot.Args.CallbackQueryEventArgs e)
    {
        var callbackQuery = e.CallbackQuery;
        long chatId = callbackQuery.Message.Chat.Id;
        int currentQuestion = users[chatId].CurrentQuestion;
        var question = QuizQuestions[currentQuestion];

        if (int.TryParse(callbackQuery.Data, out int selectedAnswer))
        {
            bool isCorrect = selectedAnswer == question.CorrectAnswer;
            
            if (isCorrect)
            {
                users[chatId].Score++;
                await botClient.AnswerCallbackQueryAsync(callbackQuery.Id, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! ‚úÖ");
            }
            else
            {
                await botClient.AnswerCallbackQueryAsync(callbackQuery.Id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! ‚ùå");
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
            await botClient.SendTextMessageAsync(
                chatId,
                $"{(isCorrect ? "‚úÖ –í–µ—Ä–Ω–æ!" : "‚ùå –ù–µ–≤–µ—Ä–Ω–æ!")}\n\n{question.Explanation}",
                parseMode: ParseMode.Html);

            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
            users[chatId].CurrentQuestion++;
            
            if (users[chatId].CurrentQuestion < QuizQuestions.Count)
            {
                await SendQuestion(chatId, users[chatId].CurrentQuestion);
            }
            else
            {
                await botClient.SendTextMessageAsync(
                    chatId,
                    $"üéâ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {users[chatId].Score} –∏–∑ {QuizQuestions.Count}",
                    replyMarkup: new ReplyKeyboardMarkup(new[]
                    {
                        new KeyboardButton("–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É"),
                        new KeyboardButton("–ú–æ–π —Å—á–µ—Ç")
                    }, resizeKeyboard: true));
            }
        }
    }

    private static async Task SendWelcomeMessage(long chatId)
    {
        var keyboard = new ReplyKeyboardMarkup(new[]
        {
            new[] { new KeyboardButton("–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É") },
            new[] { new KeyboardButton("–ú–æ–π —Å—á–µ—Ç"), new KeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å") }
        }, resizeKeyboard: true);

        await botClient.SendTextMessageAsync(
            chatId,
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –∏—Å–∫—É—Å—Å—Ç–≤–∞! üé®\n\n" +
            "–í—ã –±—É–¥–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–∞—Ö –∏ —Å—Ç–∏–ª—è—Ö –∏—Å–∫—É—Å—Å—Ç–≤–∞. " +
            "–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏.\n\n" +
            "–ù–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É¬ª, —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å!",
            replyMarkup: keyboard);
    }

    private static async Task SendQuestion(long chatId, int questionIndex)
    {
        var question = QuizQuestions[questionIndex];
        
        var options = new List<InlineKeyboardButton>();
        for (int i = 0; i < question.Answers.Count; i++)
        {
            options.Add(InlineKeyboardButton.WithCallbackData(question.Answers[i], i.ToString()));
        }

        var inlineKeyboard = new InlineKeyboardMarkup(options);

        await botClient.SendTextMessageAsync(
            chatId,
            $"–í–æ–ø—Ä–æ—Å {questionIndex + 1}/{QuizQuestions.Count}:\n\n{question.Text}",
            replyMarkup: inlineKeyboard);
    }

    private static List<Question> QuizQuestions = new List<Question>
    {
        new Question
        {
            Text = "–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª –∫–∞—Ä—Ç–∏–Ω—É ¬´–ú–æ–Ω–∞ –õ–∏–∑–∞¬ª?",
            Answers = new List<string> { "–ü–∞–±–ª–æ –ü–∏–∫–∞—Å—Å–æ", "–õ–µ–æ–Ω–∞—Ä–¥–æ –¥–∞ –í–∏–Ω—á–∏", "–í–∏–Ω—Å–µ–Ω—Ç –≤–∞–Ω –ì–æ–≥", "–ú–∏–∫–µ–ª–∞–Ω–¥–∂–µ–ª–æ" },
            CorrectAnswer = 1,
            Explanation = "<b>–õ–µ–æ–Ω–∞—Ä–¥–æ –¥–∞ –í–∏–Ω—á–∏</b> –Ω–∞–ø–∏—Å–∞–ª ¬´–ú–æ–Ω—É –õ–∏–∑—É¬ª –º–µ–∂–¥—É 1503 –∏ 1519 –≥–æ–¥–∞–º–∏. –≠—Ç–æ –æ–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∏—Å–∫—É—Å—Å—Ç–≤–∞. –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç: –∫–∞—Ä—Ç–∏–Ω–∞ —Ç–∞–∫–∂–µ –∏–∑–≤–µ—Å—Ç–Ω–∞ –∫–∞–∫ ¬´–î–∂–æ–∫–æ–Ω–¥–∞¬ª ‚Äî –æ—Ç –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–≥–æ ¬´La Gioconda¬ª."
        },
        new Question
        {
            Text = "–í –∫–∞–∫–æ–º —Å—Ç–∏–ª–µ –Ω–∞–ø–∏—Å–∞–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∞ ¬´–ó–≤—ë–∑–¥–Ω–∞—è –Ω–æ—á—å¬ª –í–∞–Ω –ì–æ–≥–∞?",
            Answers = new List<string> { "–ò–º–ø—Ä–µ—Å—Å–∏–æ–Ω–∏–∑–º", "–ü–æ—Å—Ç–∏–º–ø—Ä–µ—Å—Å–∏–æ–Ω–∏–∑–º", "–ö—É–±–∏–∑–º", "–°—é—Ä—Ä–µ–∞–ª–∏–∑–º" },
            CorrectAnswer = 1,
            Explanation = "¬´–ó–≤—ë–∑–¥–Ω–∞—è –Ω–æ—á—å¬ª ‚Äî —è—Ä–∫–∏–π –ø—Ä–∏–º–µ—Ä <b>–ø–æ—Å—Ç–∏–º–ø—Ä–µ—Å—Å–∏–æ–Ω–∏–∑–º–∞</b>. –í–∞–Ω –ì–æ–≥ –Ω–∞–ø–∏—Å–∞–ª –µ—ë –≤ 1889 –≥–æ–¥—É, –Ω–∞—Ö–æ–¥—è—Å—å –≤ –ª–µ—á–µ–±–Ω–∏—Ü–µ. –ö–∞—Ä—Ç–∏–Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω–∞ —Å–≤–æ–∏–º–∏ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º–∞–∑–∫–∞–º–∏ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å—é."
        },
        new Question
        {
            Text = "–ö—Ç–æ —Å–æ–∑–¥–∞–ª —Å–∫—É–ª—å–ø—Ç—É—Ä—É ¬´–î–∞–≤–∏–¥¬ª?",
            Answers = new List<string> { "–î–æ–Ω–∞—Ç–µ–ª–ª–æ", "–ú–∏–∫–µ–ª–∞–Ω–¥–∂–µ–ª–æ", "–ë–µ—Ä–Ω–∏–Ω–∏", "–†–æ–¥–µ–Ω" },
            CorrectAnswer = 1,
            Explanation = "–ú—Ä–∞–º–æ—Ä–Ω—É—é —Å—Ç–∞—Ç—É—é <b>¬´–î–∞–≤–∏–¥¬ª</b> —Å–æ–∑–¥–∞–ª <b>–ú–∏–∫–µ–ª–∞–Ω–¥–∂–µ–ª–æ</b> –º–µ–∂–¥—É 1501 –∏ 1504 –≥–æ–¥–∞–º–∏. –≠—Ç–æ —à–µ–¥–µ–≤—Ä —ç–ø–æ—Ö–∏ –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è –≤—ã—Å–æ—Ç–æ–π 5,17 –º–µ—Ç—Ä–æ–≤. –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —á—Ç–æ –ú–∏–∫–µ–ª–∞–Ω–¥–∂–µ–ª–æ –±—ã–ª–æ –≤—Å–µ–≥–æ 26 –ª–µ—Ç, –∫–æ–≥–¥–∞ –æ–Ω –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —ç—Ç–æ–π —Å–∫—É–ª—å–ø—Ç—É—Ä–æ–π."
        },
        new Question
        {
            Text = "–ö–∞–∫–æ–µ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∞—Å—Å–æ—Ü–∏–∏—Ä—É–µ—Ç—Å—è —Å –°–∞–ª—å–≤–∞–¥–æ—Ä–æ–º –î–∞–ª–∏?",
            Answers = new List<string> { "–°—é—Ä—Ä–µ–∞–ª–∏–∑–º", "–ö—É–±–∏–∑–º", "–§–æ–≤–∏–∑–º", "–î–∞–¥–∞–∏–∑–º" },
            CorrectAnswer = 0,
            Explanation = "<b>–°–∞–ª—å–≤–∞–¥–æ—Ä –î–∞–ª–∏</b> –±—ã–ª –æ–¥–Ω–∏–º –∏–∑ –≤–µ–¥—É—â–∏—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π <b>—Å—é—Ä—Ä–µ–∞–ª–∏–∑–º–∞</b>. –ï–≥–æ —Å–∞–º—ã–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ ¬´–ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ –ø–∞–º—è—Ç–∏¬ª —Å –ø–ª–∞–≤—è—â–∏–º–∏—Å—è —á–∞—Å–∞–º–∏, —Å—Ç–∞–ª–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ —ç—Ç–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
        },
        new Question
        {
            Text = "–í –∫–∞–∫–æ–º –≤–µ–∫–µ –∂–∏–ª –†–µ–º–±—Ä–∞–Ω–¥—Ç?",
            Answers = new List<string> { "XVI –≤–µ–∫", "XVII –≤–µ–∫", "XVIII –≤–µ–∫", "XIX –≤–µ–∫" },
            CorrectAnswer = 1,
            Explanation = "<b>–†–µ–º–±—Ä–∞–Ω–¥—Ç</b> –•–∞—Ä–º–µ–Ω—Å –≤–∞–Ω –†–µ–π–Ω (1606‚Äì1669) –∂–∏–ª –≤ <b>XVII –≤–µ–∫–µ</b>. –û–Ω —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ–¥–Ω–∏–º –∏–∑ –≤–µ–ª–∏—á–∞–π—à–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ ¬´–∑–æ–ª–æ—Ç–æ–≥–æ –≤–µ–∫–∞¬ª –≥–æ–ª–ª–∞–Ω–¥—Å–∫–æ–π –∂–∏–≤–æ–ø–∏—Å–∏. –ï–≥–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –≤–∫–ª—é—á–∞—é—Ç ¬´–ù–æ—á–Ω–æ–π –¥–æ–∑–æ—Ä¬ª –∏ –º–Ω–æ–≥–æ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ–ø–æ—Ä—Ç—Ä–µ—Ç—ã."
        }
    };
}

class UserData
{
    public int CurrentQuestion { get; set; }
    public int Score { get; set; }
}

class Question
{
    public string Text { get; set; }
    public List<string> Answers { get; set; }
    public int CorrectAnswer { get; set; }
    public string Explanation { get; set; }
}
